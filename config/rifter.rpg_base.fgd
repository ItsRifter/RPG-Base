
@BaseClass = BaseProperties_rifter_rpg_base
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// NPCSpawnpoint
//
@PointClass base(BaseProperties_rifter_rpg_base) editormodel( "models/citizen/citizen.vmdl" ) 
metadata
{
	entity_tool_name = "NPC Spawnpoint"
	entity_tool_group = "RPG"
	entity_tool_tip = "Defines a point where a specific NPC can spawn"
}
= info_rpg_npc_spawnpoint : ""
[
	npc_type(string) : "Npctype" :  : "What type of NPC should spawn here"
	npc_respawn_rate(integer) : "Npcrespawn Rate" : 0 : "How quick after death should this NPC respawn"
]

